---
alwaysApply: false
description: ビルドエラー修正
---
# ビルドエラー修正ルール

TypeScriptのビルドエラーを体系的に修正し、学習のために記録します。

## 実行手順

### 1. ビルドエラーの確認
```bash
pnpm build
```

### 2. TypeScriptエラーの詳細確認
```bash
pnpm tsc --noEmit
```

## 修正の記録

bugfix.mdに以下の形式で記録：

```markdown
## [日時] ビルドエラー: [エラーの簡潔な説明]

**ブランチ**: team-x
**カテゴリ**: ビルドエラー
**修正前の症状**:
- TypeScript: [具体的なエラーメッセージ]
- ファイル: [ファイルパス]:[行番号]:[列番号]

**修正内容**:
- [ファイル名]:[行番号] - [修正内容]
- `修正前のコード`
- → `修正後のコード`

**確認方法**:
- `pnpm build` でビルドが成功することを確認
- `pnpm tsc --noEmit` でTypeScriptエラーがないことを確認
```

## デバッグのヒント

### 1. エラーメッセージを読む
- ファイル名と行番号を確認
- 期待される型と実際の型を比較
- エラーの種類を理解

### 2. 型定義を確認
```bash
# 特定の型定義を検索
grep -r "TetriminoType" src/

# インターフェースを確認
grep -r "interface.*Props" src/
```

### 3. TypeScriptの型推論を確認
- VSCodeやCursorでホバーして型を確認
- `// @ts-ignore`は使わない（学習のため）

### 4. 段階的な修正
1. 最初のエラーから順に修正
2. 各修正後にビルドを実行
3. 新たなエラーが出ないか確認

## 確認コマンド

```bash
# ビルドを実行
pnpm build

# TypeScriptの型チェックのみ
pnpm tsc --noEmit

# 特定ファイルの型チェック
pnpm tsc --noEmit src/Game.tsx

# エラーの詳細を表示
pnpm tsc --noEmit --pretty

# watchモードで継続的にチェック
pnpm tsc --noEmit --watch
```

## チェックリスト

- [ ] `pnpm build`でエラーを確認
- [ ] エラーメッセージを詳細に読む
- [ ] 型定義を確認
- [ ] 必要な修正を実施
- [ ] 修正内容をbugfix.mdに記録
- [ ] `pnpm build`で成功を確認
- [ ] アプリケーションの動作確認

## 注意事項

- `any`型で逃げない（Lintエラーにもなる）
- `@ts-ignore`を使わない
- 型アサーション(`as`)は最小限に
- エラーの根本原因を理解してから修正
- 修正により新たなエラーが出ないか確認
