.gameBoard {
  position: relative;
  display: grid;
  gap: 2px;
  padding: clamp(0.75rem, 1.4vw, 1.25rem);
  border-radius: clamp(1.25rem, 3vw, 2.25rem);
  background:
    linear-gradient(180deg, rgba(18, 24, 45, 0.95) 0%, rgba(6, 8, 18, 0.98) 100%),
    linear-gradient(140deg, rgba(0, 255, 199, 0.12), rgba(7, 116, 255, 0.18));
  box-shadow:
    inset 0 0 0 1px rgba(132, 180, 255, 0.25),
    0 20px 45px rgba(8, 12, 32, 0.65);
  overflow: hidden;
}

.gameBoard::before {
  content: "";
  position: absolute;
  inset: clamp(0.75rem, 1.6vw, 1.4rem);
  border-radius: inherit;
  border: 1px solid rgba(255, 255, 255, 0.05);
  opacity: 0.65;
  pointer-events: none;
}

.gridWrap {
  position: relative;
  display: grid;
  gap: 1px;
  padding: clamp(0.5rem, 1vw, 0.85rem);
  border-radius: clamp(1rem, 2.5vw, 1.8rem);
  background:
    radial-gradient(60% 80% at 50% 35%, rgba(95, 192, 255, 0.2), rgba(95, 192, 255, 0)),
    radial-gradient(65% 70% at 50% 100%, rgba(255, 160, 246, 0.15), rgba(255, 160, 246, 0));
  box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.04);
}

.row {
  display: grid;
  grid-template-columns: repeat(10, minmax(0, 1fr));
  gap: 1px;
}

.cell {
  position: relative;
  width: clamp(1.35rem, 2vw, 1.75rem);
  aspect-ratio: 1 / 1;
  border-radius: clamp(0.35rem, 1vw, 0.55rem);
  background-color: rgba(0, 8, 21, 0.75);
  box-shadow: inset 0 0 0 1px rgba(51, 122, 255, 0.08);
  transition:
    transform 0.18s ease,
    box-shadow 0.18s ease,
    background-color 0.18s ease,
    filter 0.18s ease;
}

.cell::after {
  content: "";
  position: absolute;
  inset: clamp(1px, 0.22vw, 2px);
  border-radius: inherit;
  background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.12), rgba(255, 255, 255, 0));
  opacity: 0;
  transition: opacity 0.25s ease;
}

.cell.empty {
  background: linear-gradient(140deg, rgba(7, 13, 28, 0.85), rgba(3, 6, 12, 0.95));
  box-shadow: inset 0 0 0 1px rgba(37, 69, 122, 0.12);
}

.cell.filled {
  background: linear-gradient(160deg, rgba(255, 255, 255, 0.18), rgba(0, 0, 0, 0.2));
  filter: saturate(125%);
  box-shadow:
    inset 0 0 0 1px rgba(255, 255, 255, 0.22),
    0 8px 18px rgba(5, 12, 31, 0.55);
}

.cell.filled::after {
  opacity: 1;
}

.cell.preview {
  box-shadow:
    inset 0 0 0 1px rgba(92, 196, 255, 0.45),
    0 0 18px rgba(92, 196, 255, 0.6);
  filter: saturate(155%);
}

.cell.preview::after {
  opacity: 1;
  background: radial-gradient(circle at 20% 20%, rgba(95, 196, 255, 0.45), rgba(95, 196, 255, 0));
}

/* Line clearing animation */
@keyframes lineClear {
  0% {
    transform: scale(1);
    box-shadow:
      inset 0 0 0 1px rgba(255, 255, 255, 0.22),
      0 8px 18px rgba(5, 12, 31, 0.55);
  }

  45% {
    transform: scale(1.08);
    box-shadow:
      inset 0 0 0 2px rgba(99, 221, 255, 0.8),
      0 0 28px rgba(99, 221, 255, 0.55);
  }

  100% {
    transform: scale(1);
    box-shadow:
      inset 0 0 0 1px rgba(255, 255, 255, 0.12),
      0 0 10px rgba(99, 221, 255, 0.25);
  }
}

.clearing {
  animation: rowPulse 0.45s ease-in-out;
}

@keyframes rowPulse {
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.45;
  }

  100% {
    opacity: 1;
  }
}

.clearingCell.filled {
  animation: lineClear 0.5s ease-in-out;
}

.quantumScan {
  position: absolute;
  inset: clamp(0.75rem, 1.6vw, 1.4rem);
  border-radius: inherit;
  background: linear-gradient(0deg, rgba(90, 200, 255, 0) 10%, rgba(173, 235, 255, 0.24) 50%, rgba(90, 200, 255, 0) 90%);
  opacity: 0;
  animation: scan 3.6s linear infinite;
}

@keyframes scan {
  0% {
    opacity: 0;
    transform: translateY(140%);
  }

  30% {
    opacity: 0.55;
  }

  70% {
    opacity: 0.55;
  }

  100% {
    opacity: 0;
    transform: translateY(-140%);
  }
}
